stages:
    - build
    - deploy

build_image:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  script:
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

<<<<<<< HEAD
variables:
  DOCKER_DRIVER: overlay
  
variables:
    APP_NAME: spring-demo-ds2020
    
deploy:
  image: docker:latest
  services:
    - docker:dind
  stage: deploy
  only:
    - docker_production
  script:
    - docker login --username=_ --password=$HEROKU_API_KEY $HEROKU_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest
    - docker tag $CI_REGISTRY_IMAGE:latest $HEROKU_REGISTRY_IMAGE:latest
    - docker push $HEROKU_REGISTRY_IMAGE:latest
    - docker run --rm -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli container:release web --app $APP_NAME

=======
test:
    stage: test
    image: maven:3.3.9-jdk-8
    script:
    - echo "Test DEMO app"
    - mvn test && mvn jacoco:report
    - cat target/site/jacoco/index.html | grep -o '.*'
    coverage: "/Total.*?([0-9]{1,3})%/"


checkstyle:
    stage: checkstyle
    image: maven:3.3.9-jdk-8
    script:
    - echo "Checkstyle DEMO app"
    - mvn checkstyle:check

variables:
    DB_IP: ec2-52-48-65-240.eu-west-1.compute.amazonaws.com
    DB_PORT: 5432
    DB_USER: wlryktxyqpyomt
    DB_PASSWORD: bee98a2afc7f0c3bcdd7df60ee7278ec5fa5cb4fb06a4039b1ffb1107d5851fd
    DB_DBNAME: devidei2vqv0v4
    
deploy:
  stage: deploy
  image: ruby:2.3
  script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
    - dpl --provider=heroku --app=spring-demo-ds2020 --api-key=$HEROKU_API_KEY
  only:
    - production
>>>>>>> c7a3617aabcfb864a6e16d97bb0722d5d5c00946
